{
  "dt/create": {
    "prefix": "dt/create",
    "body": [
      "/// <summary>",
      "/// 创建信息",
      "/// </summary>",
      "/// <param name=\"input\">实体对象</param>",
      "/// <returns></returns>",
      "[HttpPost]",
      "public async Task Create([FromBody] ${1:InputDto} input)",
      "{",
      "    ${2:Entity} entity = input.Adapt<${2:Entity}>();",
      "",
      "    entity.Create();",
      "",
      "    try",
      "    {",
      "        await ${3:_repository}.InsertAsync(entity);",
      "    }",
      "    catch (System.Exception)",
      "    {",
      "        throw Oops.Oh(\"异常\");",
      "    }",
      "}"
    ],
    "description": "创建方法"
  },
  "dt/update": {
    "prefix": "dt/update",
    "body": [
      "/// <summary>",
      "/// 更新信息",
      "/// </summary>",
      "/// <param name=\"id\">主键</param>",
      "/// <param name=\"input\">实体对象</param>",
      "/// <returns></returns>",
      "[HttpPut(\"{id}\")]",
      "public async Task Update(string id, [FromBody] ${1:InputDto} input)",
      "{",
      "    ${2:Entity} entity = input.Adapt<${2:Entity}>();",
      "",
      "    entity.Id = id;",
      "    entity.LastModify();",
      "",
      "    await _repository",
      "        .AsUpdateable(entity)",
      "        .UpdateColumns(it => new",
      "        {",
      "            ${3:Columns}",
      "        })",
      "        .ExecuteCommandAsync();",
      "}"
    ],
    "description": "更新方法"
  },
  "dt/delete": {
    "prefix": "dt/delete",
    "body": [
      "/// <summary>",
      "/// 删除信息",
      "/// </summary>",
      "/// <param name=\"id\">主键</param>",
      "/// <returns></returns>",
      "[HttpDelete(\"{id}\")]",
      "public async Task Delete(string id)",
      "{",
      "    ${1:Entity}? entity = await _repository.GetFirstAsync(m =>",
      "        m.Id == id && m.DeleteMark == null",
      "    );",
      "",
      "    _ = entity ?? throw Oops.Bah(\"对象不存在\");",
      "",
      "    entity.Delete();",
      "",
      "    await _repository",
      "        .AsUpdateable(entity)",
      "        .UpdateColumns(it => new",
      "        {",
      "            it.DeleteTime,",
      "            it.DeleteMark,",
      "            it.DeleteUserId",
      "        })",
      "        .ExecuteCommandAsync();",
      "}"
    ],
    "description": "删除方法"
  },
  "dt/export": {
    "prefix": "dt/export",
    "body": [
      "/// <summary>",
      "/// 导出",
      "/// </summary>",
      "/// <param name=\"input\">条件</param>",
      "/// <returns></returns>",
      "[HttpGet(\"ExportExcelData\")]",
      "public async Task<dynamic> ExportExcelData([FromQuery] ${1:inputQueryDto} input)",
      "{",
      "    var dataList = new List<${2:outputDto}>();",
      "    if (input.exportDataType == \"0\")",
      "    {",
      "        var data = await GetPageList(input);",
      "",
      "        dataList = data.list;",
      "    }",
      "    else",
      "    {",
      "        dataList = await GetList(input);",
      "    }",
      "    System.Console.WriteLine(\"数量：\" + dataList.Count);",
      "    ExcelConfig excelconfig = new ExcelConfig();",
      "    excelconfig.FileName = \"${3:fileName}.xls\";",
      "    excelconfig.HeadFont = \"微软雅黑\";",
      "    excelconfig.HeadPoint = 10;",
      "    excelconfig.IsAllSizeColumn = true;",
      "    excelconfig.ColumnModel = new List<ExcelColumnModel>();",
      "    var filedList = input.selectKey.Split(\",\");",
      "    excelconfig.ColumnModel = input",
      "        .selectKey.Split(\",\")",
      "        .Select(item => new ExcelColumnModel()",
      "        {",
      "            Column = item,",
      "            ExcelColumn = GetFiledName(item)",
      "        })",
      "        .ToList();",
      "    var addPath = Path.Combine(FileVariable.TemporaryFilePath, excelconfig.FileName);",
      "    var stream = ExcelExportHelper<${2:outputDto}>.ExportMemoryStream(",
      "        dataList,",
      "        excelconfig",
      "    );",
      "    await _fileManager.UploadFileByType(",
      "        stream,",
      "        FileVariable.TemporaryFilePath,",
      "        excelconfig.FileName",
      "    );",
      "    _cacheManager.Set(excelconfig.FileName, string.Empty);",
      "    return new",
      "    {",
      "        name = excelconfig.FileName,",
      "        url = \"/api/file/Download?encryption=\"",
      "            + DESCEncryption.Encrypt(",
      "                _userManager.UserId + \"|\" + excelconfig.FileName + \"|\" + addPath,",
      "                \"DT\"",
      "            )",
      "    };",
      "}",
      "",
      "/// <summary>",
      "/// 获取字段名称.",
      "/// </summary>",
      "/// <param name=\"filed\"></param>",
      "/// <returns></returns>",
      "private string GetFiledName(string filed)",
      "{",
      "    switch (filed)",
      "    {",
      "        case \"title\":",
      "            return \"主题\";",
      "        ${4:case \"title\":return \"主题\";}",
      "        default:",
      "            return string.Empty;",
      "    }",
      "}"
    ],
    "description": "导出方法"
  },
  "dt/getPage": {
    "prefix": "dt/getPage",
    "body": [
      "/// <summary>",
      "/// 获取分页列表",
      "/// </summary>",
      "/// <param name=\"input\">筛选参数</param>",
      "/// <returns></returns>",
      "[HttpGet(\"\")]",
      "public async Task<PageResult<${1:OutputListDto}>> GetPageList(",
      "    [FromQuery] ${2:StickyNoteQueryInput} input",
      ")",
      "{",
      "    SqlSugarPagedList<${1:OutputListDto}>? data =",
      "        new SqlSugarPagedList<${1:OutputListDto}>();",
      "",
      "    ${3:// 数据权限过滤}",
      "    var authorizeWhere = new List<IConditionalModel>();",
      "    var menu = await _repository",
      "        .AsSugarClient()",
      "        .Queryable<ModuleEntity>()",
      "        .FirstAsync(x => x.EnCode == \"${7:StickyNote}\");",
      "",
      "    if (_userManager.User.IsAdministrator == 0)",
      "    {",
      "        authorizeWhere = await _userManager.GetConditionAsync<${4:Entity}>(",
      "            menu.Id,",
      "            \"F_ID\",",
      "            true,",
      "            \"\",",
      "            false",
      "        );",
      "    }",
      "",
      "    data = await _repository",
      "        .AsQueryable()",
      "        .Where(c => c.DeleteMark == null)",
      "        ${5:.Where(authorizeWhere)}",
      "        .WhereIF(!string.IsNullOrEmpty(input.title), c => c.Title.Contains(input.title))",
      "        .OrderBy(a => a.SortCode)",
      "        .OrderBy(a => a.CreatorTime, OrderByType.Desc)",
      "        .Select(c => new ${1:OutputListDto}",
      "        {",
      "            ${6:id = c.Id}",
      "        })",
      "        .ToPagedListAsync(input.currentPage, input.pageSize);",
      "",
      "",
      "    return new PageResult<${1:OutputListDto}>()",
      "    {",
      "        list = data.list.ToList(),",
      "        pagination = data.pagination.Adapt<PageResult>()",
      "    };",
      "}"
    ],
    "description": "获取分页列表(带数据权限)"
  },
  "dt/serviceClass": {
    "prefix": "dt/serviceClass",
    "body": [
      "using DT.Common.Filter;",
      "using DT.DependencyInjection;",
      "using DT.DynamicApiController;",
      "using DT.FriendlyException;",
      "using Mapster;",
      "using Microsoft.AspNetCore.Mvc;",
      "using SqlSugar;",
      "",
      "namespace DT.WeeklyReport",
      "{",
      "   /// <summary>",
      "   /// 业务实现: ${1:功能名称}",
      "   /// </summary>",
      "   [ApiDescriptionSettings(Tag = \"${2:prefix}\", Name = \"${3:moduleName}\", Order = ${4:166})]",
      "   [Route(\"api/${2:prefix}/[controller]\")]",
      "   public class ${3:moduleName}Service : I${3:moduleName}Service, IDynamicApiController, ITransient",
      "   {",
      "       private readonly ISqlSugarRepository<${5:Entity}> _repository;",
      "",
      "       public ${3:moduleName}Service(ISqlSugarRepository<${5:Entity}> repository)",
      "       {",
      "           _repository = repository;",
      "       }",
      "",
      "       ${6:StartCode}",
      "   }",
      "}"
    ],

    "description": "接口服务类创建"
  },
  "dt/getInfo": {
    "prefix": "dt/getInfo",
    "body": [
      "/// <summary>",
      "/// 获取信息",
      "/// </summary>",
      "/// <param name=\"id\">主键</param>",
      "/// <returns></returns>",
      "[HttpGet(\"{id}\")]",
      "public async Task<${1:outputDto}> GetInfo(string id)",
      "{",
      "    ${2:entity} entity = await _repository.GetFirstAsync(m => m.Id == id);",
      "    _ = entity ?? throw Oops.Bah(\"对象不存在\");",
      "",
      "    var result = entity.Adapt<${1:outputDto}>();",
      "",
      "    return result;",
      "}"
    ],
    "description": "获取信息"
  }
}
